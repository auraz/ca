# -*- coding: utf-8 -*-    import initclass CellularAutomaton():        def __init__(self, cells = init.cells, transition = init.transition):        """создаёт новый клеточный автомат с начальным состоянием и функцией перехода, заданными в init"""        self.transition = transition        self.width = len(cells[0])        self.height = len(cells)        self.cells = cells        self.__surround(self.cells, self.width, self.height)    def __surround(self, l, m, n):        # Вспомогательная функция.        # Окружает заданный двухмерный список слоем из None со всех сторон.        for row in l:            row[m:m] = [None]   # справа            row[0:0] = [None]   # слева        l[n:n] = [[None for i in range(m + 2)]]   # снизу        l[0:0] = [l[n]]                           # сверху        def next_cell(self, x, y):        """Next value of the particular cell."""        return self.transition(self.neighbors(x, y))        def next(self):        """One iteration of the cellular automaton."""        new_field = [[self.next_cell(i, j)                         for i in range(self.width)]                             for j in range(self.height)]        self.cells = new_field        self.__surround(self.cells, self.width, self.height)        def neighbors(self, x, y):        """Возвращает всех соседей заданной клетки."""        return self.get_cells(x - 1, y - 1, 3, 3)        def are_neighbors(self, x1, y1, x2, y2):        """проверяет, являются ли заданные две клетки соседними"""        return x2 - x1 in [-1, 0, 1] and y2 - y1 in [-1, 0, 1]        def get_cells(self, left  = 0, top    = 0,                        width = 1, height = 1):        """Возвращает клетки из заданного диапазона."""        return [row[left + 1 : left + width + 1]            for row in self.cells[top + 1 : top + height + 1]]        def get_all_cells(self):        """Возвращает все клетки клеточного автомата"""        return self.get_cells(0, 0, self.width, self.height)def print_2d(seq):    """Выводит двухмерную последовательность построчно."""    for row in seq:        print rowif __name__ == '__main__':    ca = CellularAutomaton()    print_2d(ca.get_all_cells())    print    ca.next()    print_2d(ca.get_all_cells())