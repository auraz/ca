# -*- coding: utf-8 -*-"""ТЕСТЫ НАДО ПОПРАВИТЬ!!!"""import unittestfrom cellular_automaton import *test_cells = [[0 for i in range(9)] for i in range(9)]test_cells[4][4] = 9def test_transition(neighbors):    # test4 исходит из того, что здесь будет функция, возвращающая среднее арифметическое    passclass TestCellularAutomaton(unittest.TestCase):        def setUp(self):        self.ca = CellularAutomaton(test_cells, test_transition)        def test1(self):        """test get_all_cells() method"""        self.assertEqual(self.ca.get_all_cells(), test_cells)        def test2(self):        """test neighbors(x, y) method"""        self.assertEqual(self.ca.neighbors(4, 4), [[0, 0, 0],                                                   [0, 9, 0],                                                   [0, 0, 0]])                self.assertEqual(self.ca.neighbors(7, 9), [[0,    0,    0],                                                   [0,    0,    0],                                                   [None, None, None]])                self.assertEqual(self.ca.neighbors(9, 1), [[None, None, None],                                                   [0,    0,    None],                                                   [0,    0,    None]])    def test3(self):        """test neighbors(x1, y1, x2, y2) method"""        self.assertTrue(self.ca.are_neighbors(5, 7, 5, 7,))        self.assertTrue(self.ca.are_neighbors(4, 6, 4, 5,))        self.assertTrue(self.ca.are_neighbors(2, 8, 1, 9,))        self.assertFalse(self.ca.are_neighbors(4, 1, 7, 6,))        def test4(self):        """test next() method"""        self.ca.next()        expected = [[0, 0, 0, 0, 0, 0, 0, 0, 0],                    [0, 0, 0, 0, 0, 0, 0, 0, 0],                    [0, 0, 0, 0, 0, 0, 0, 0, 0],                    [0, 0, 0, 1, 1, 1, 0, 0, 0],                    [0, 0, 0, 1, 1, 1, 0, 0, 0],                    [0, 0, 0, 1, 1, 1, 0, 0, 0],                    [0, 0, 0, 0, 0, 0, 0, 0, 0],                    [0, 0, 0, 0, 0, 0, 0, 0, 0],                    [0, 0, 0, 0, 0, 0, 0, 0, 0]]        self.assertEqual(self.ca.get_cells(), expected)suite = unittest.TestLoader().loadTestsFromTestCase(TestCellularAutomaton)unittest.TextTestRunner(verbosity=2).run(suite)